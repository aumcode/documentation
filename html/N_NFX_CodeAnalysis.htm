<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>NFX.CodeAnalysis Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="NFX.CodeAnalysis namespace" /><meta name="Microsoft.Help.F1" content="NFX.CodeAnalysis" /><meta name="Microsoft.Help.Id" content="N:NFX.CodeAnalysis" /><meta name="Description" content="Provides code analysis-related base contracts/models for writing compilers and various textual processors. JSON, C#, Laconic parsers are implemented using this concept" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="'true'" /><meta name="container" content="NFX.CodeAnalysis" /><meta name="file" content="N_NFX_CodeAnalysis" /><meta name="guid" content="N_NFX_CodeAnalysis" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdLogoColumn"><img src="./../icons/NFX.logo.35.png" /></td><td class="OH_tdTitleColumn">NFX.CodeAnalysis Namespace</td><td class="OH_tdRunningTitleColumn">NFX Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary">Provides code analysis-related base contracts/models for writing compilers and various textual processors.
JSON, C#, Laconic parsers are implemented using this concept</div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Classes</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Class</th><th class="ps_descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_CodeAnalysisException.htm" target="">CodeAnalysisException</a></td><td><div class="summary">
            Base exception thrown by the framework
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_CodeProcessorException.htm" target="">CodeProcessorException</a></td><td><div class="summary">
            Thrown by code processors such as lexers, parsers ,  symantic analyzers, compilers etc...
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_CommonCodeProcessor.htm" target="">CommonCodeProcessor</a></td><td><div class="summary">
            Provides base implementation for common code processors
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Language.htm" target="">Language</a></td><td><div class="summary">
            Represents and abstraction of the language
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_LazyFSMState_1.htm" target="">LazyFSMState<span id="ID0ECABMADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABMADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TToken<span id="ID0EAABMADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABMADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Represents a state object for Lazy Finate State Machine that enumerates tokes from IEnumerable(Token)
             and does not support a notion of index addressing
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Lexer_1.htm" target="">Lexer<span id="ID0ECABLADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABLADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TToken<span id="ID0EAABLADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABLADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Performs lexical analysis of the source code in particular language
            Allows to enumerate over source as typed Token stream - depending on implementation enumeration may do
            lexical analysis token-by-token or in chunks with every enumerator advance
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Message.htm" target="">Message</a></td><td><div class="summary">
            Represents a message emitted from code-analyzing entities such as lexers, parsers, semantic analyzers and compilers.
            Messages have severity type like warning, info or error etc.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_MessageList.htm" target="">MessageList</a></td><td><div class="summary">
            Provides a list of messages, this class is not thread-safe
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_ObjectResultAnalysisContext_1.htm" target="">ObjectResultAnalysisContext<span id="ID0ECABIADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABIADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TObject<span id="ID0EAABIADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABIADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            A context that can hold analysis result as TObject.
            This class is useful for cases like dynamic language parsers (i.e. JSON)
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Parser_1.htm" target="">Parser<span id="ID0ECABHADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABHADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TLexer<span id="ID0EAABHADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABHADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Performs parsing of token streams provided by lexers
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_PatternSearch.htm" target="">PatternSearch</a></td><td><div class="summary">
            Provides Token-pattern matching utilities
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_SourceRefCommonCodeProcessor.htm" target="">SourceRefCommonCodeProcessor</a></td><td><div class="summary">
            Provides base implementation for common code processors
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_StringEscapeErrorException.htm" target="">StringEscapeErrorException</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Token.htm" target="">Token</a></td><td><div class="summary">
            Represents a lexical token of the language. This is an abstract class that particular language implementations must extend
             to define language-specific token types
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_Tokenized_1.htm" target="">Tokenized<span id="ID0ECABCADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABCADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TToken<span id="ID0EAABCADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABCADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Provides read-only view over TokenList
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_TokenList_1.htm" target="">TokenList<span id="ID0ECABBADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABBADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TToken<span id="ID0EAABBADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABBADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            A list of tokens
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CodeAnalysis_UnspecifiedLanguage.htm" target="">UnspecifiedLanguage</a></td><td><div class="summary">
            Represents Unspecified unknown language
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Interfaces</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Interface</th><th class="ps_descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_IAnalysisContext.htm" target="">IAnalysisContext</a></td><td><div class="summary">
            Describes an entity that retains state during analysis, such as: module compiler, project compiler, code unit translator etc.
            This entity may also contain compiler/parser/lexer options etc.
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_ICodeProcessor.htm" target="">ICodeProcessor</a></td><td><div class="summary">
            Describes an entity that may process source code in some language
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_ILanguageProcessorNotifications.htm" target="">ILanguageProcessorNotifications</a></td><td><div class="summary">
            Describes an entity capable of receiving messages as they are emitted by entities such as parsers and compilers
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_ILexer.htm" target="">ILexer</a></td><td><div class="summary">
            Describes general lexer interface.
            Lexers turn string source input which is obtained via ISourceText implementation (i.e. FileSource,WebSource...)
             into tokenized stream. Some lexer implementations may support lazy analysis, that is - source text analysis which is done
              in chunks when lexer is iterated over, others may lex the whole source text at once
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_IParser.htm" target="">IParser</a></td><td><div class="summary">
            Describes general parser interface
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_CodeAnalysis_IProjectItem.htm" target="">IProjectItem</a></td><td><div class="summary">
            Represents an item that is a part of some project, i.e. a CS source file in CSharp project
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Delegates</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Delegate</th><th class="ps_descriptionColumn">Description</th></tr><tr data="delegate; public"><td><img src="./../icons/pubdelegate.gif" alt="Public delegate" title="Public delegate" /></td><td><a href="T_NFX_CodeAnalysis_LazyFSMPredicate_1.htm" target="">LazyFSMPredicate<span id="ID0ECABAABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABAABAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TToken<span id="ID0EAABAABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABAABAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Lazy Finate State Machine (FSM) predicate, tries to match condition and returns appropriate next action
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Enumerations</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Enumeration</th><th class="ps_descriptionColumn">Description</th></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_CodeAnalysis_FSMI.htm" target="">FSMI</a></td><td><div class="summary">
            Describes transition instructions for Finate State Machine (FSM)
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_CodeAnalysis_LanguageFamily.htm" target="">LanguageFamily</a></td><td><div class="summary">
            Defines various languages
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_CodeAnalysis_MessageType.htm" target="">MessageType</a></td><td><div class="summary">
            Message type like: Info, Warning, Error
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_CodeAnalysis_TokenKind.htm" target="">TokenKind</a></td><td><div class="summary">
            Provides language-agnostic token classification
            </div></td></tr></table></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.itadapter.com" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2006-2017 ITAdapter Corp Inc. (http://www.itadapter.com)</a></p><div class="OH_feedbacklink"><a href="mailto:nfx@itadapter.com?subject=NFX+Class+Library+NFX.CodeAnalysis+Namespace+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to Contact Us.</div></div></body></html>