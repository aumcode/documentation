<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp" xmlns:mshelp="http://msdn.microsoft.com/mshelp"><head><link rel="SHORTCUT ICON" href="./../icons/favicon.ico" /><style type="text/css">.OH_CodeSnippetContainerTabLeftActive, .OH_CodeSnippetContainerTabLeft,.OH_CodeSnippetContainerTabLeftDisabled { backgroundImageName: tabLeftBG.gif; }.OH_CodeSnippetContainerTabRightActive, .OH_CodeSnippetContainerTabRight,.OH_CodeSnippetContainerTabRightDisabled { backgroundImageName: tabRightBG.gif; }.OH_footer { backgroundImageName: footer_slice.gif; background-position: top; background-repeat: repeat-x; }</style><link rel="stylesheet" type="text/css" href="./../styles/branding.css" /><link rel="stylesheet" type="text/css" href="./../styles/branding-en-US.css" /><style type="text/css">
			body
			{
			border-left:5px solid #e6e6e6;
			overflow-x:scroll;
			overflow-y:scroll;
			}
		</style><script src="./../scripts/branding.js" type="text/javascript"><!----></script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>NFX Namespace</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="NFX namespace" /><meta name="Microsoft.Help.F1" content="NFX" /><meta name="Microsoft.Help.Id" content="N:NFX" /><meta name="Description" content="Root namespace for NFX framework, contains some commonly-used classes" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="'true'" /><meta name="container" content="NFX" /><meta name="file" content="N_NFX" /><meta name="guid" content="N_NFX" /><link type="text/css" rel="stylesheet" href="ms-help://Hx/HxRuntime/HxLink.css" /><meta name="SelfBranded" content="true" /></head><body onload="onLoad()" class="primary-mtps-offline-document"><div class="OH_outerDiv"><div class="OH_outerContent"><table class="TitleTable"><tr><td class="OH_tdLogoColumn"><img src="./../icons/NFX.logo.35.png" /></td><td class="OH_tdTitleColumn">NFX Namespace</td><td class="OH_tdRunningTitleColumn">NFX Class Library</td></tr></table><div id="mainSection"><div id="mainBody"><span class="introStyle"></span><p style="color: #dc143c; font-size: 8.5pt; font-weight: bold;">[This is preliminary documentation and is subject to change.]</p><div class="summary">Root namespace for NFX framework, contains some commonly-used classes</div><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Classes</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Class</th><th class="ps_descriptionColumn">Description</th></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_AbsentValue.htm" target="">AbsentValue</a></td><td><div class="summary">
            Represents a special value that signifies the absence of any entity/state/value/data.
            The instances may be stored in a cache to indicate that the key exists, but points to a non-existing "absent" entity.
            This is usefull for DB lookups, not to touch the backend for values that dont exist.
            Use AbsentValue.Instance singleton
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_App.htm" target="">App</a></td><td><div class="summary">
            Provides a shortcut access to app-global context NFX.ApplicationModel.ExecutionContext.Application.*
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Aver.htm" target="">Aver</a></td><td><div class="summary">
            Provides basic averments for test construction. May call Aver.Fail(msg) manually
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_AvermentException.htm" target="">AvermentException</a></td><td><div class="summary">
            Thrown by Aver class to indicate averment failures
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CollectionUtils.htm" target="">CollectionUtils</a></td><td><div class="summary">
            Some helpful extensions for standard collections
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_CoreConsts.htm" target="">CoreConsts</a></td><td><div class="summary">
            Central non-lozalizable NFX system consts
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_DataUtils.htm" target="">DataUtils</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Debug.htm" target="">Debug</a></td><td><div class="summary">
            Facilitates debugging tasks enabled by DEBUG conditional define
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_DebugAssertionException.htm" target="">DebugAssertionException</a></td><td><div class="summary">
            Thrown by Debug class to indicate assertion failures
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Debugging.htm" target="">Debugging</a></td><td><div class="summary">
            Facilitates debugging tasks that do not depend on any conditional defines
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_DisposableObject.htm" target="">DisposableObject</a></td><td><div class="summary">
            General-purpose base class for objects that need to be disposed
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_DisposedObjectException.htm" target="">DisposedObjectException</a></td><td><div class="summary">
            This exception is thrown from DisposableObject.EnsureObjectNotDisposed() method
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_ELink.htm" target="">ELink</a></td><td><div class="summary">
            Represents an Electronic Link which is an alpha-encoded identifier along with metadata information.
            Warning! This class MAY generate fragments of profanity, however any ID can be regenerated using a different seed passed to Encode(seed)
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_EmbeddedResource.htm" target="">EmbeddedResource</a></td><td><div class="summary">
             Fetches resources such as script statement text by scriptName from assembly resource stream.
             Mostly used for SQL and JavaScript but maybe used for any text retrieval.
             This class is 100% safe for multithreading operations.
             Script texts are cached in ram for faster subsequent access.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_ExternalParameterAttribute.htm" target="">ExternalParameterAttribute</a></td><td><div class="summary">
            Decorates properties that may be used as bindable external parameters.
            Provides methods for extraction of parameter names, values and binding of external object values into
             public read/write properties decorated by this attribute
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_ExternalRandomGenerator.htm" target="">ExternalRandomGenerator</a></td><td><div class="summary">
            Represents a random generator which is based on System.Random() yet has an ability to feed external samples into it.
             Use ExtrenalRandomGenerator.Instance to use the default thread-safe instance.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_IntMath.htm" target="">IntMath</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_IOMiscUtils.htm" target="">IOMiscUtils</a></td><td><div class="summary">
            Misc utils for I/O
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_MiscUtils.htm" target="">MiscUtils</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_NFXException.htm" target="">NFXException</a></td><td><div class="summary">
            Base exception thrown by the framework
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_ObjectValueConversion.htm" target="">ObjectValueConversion</a></td><td><div class="summary">
            Provides extension methods for converting object values to different scalar types
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_OrderedRegistry_1.htm" target="">OrderedRegistry<span id="ID0ECABMADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABMADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABMADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABMADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Represents a thread-safe registry of T which is ordered by Order property.
            This class is efficient for concurrent read access and is not designed for cases when frequent modifications happen.
            It is ideal for lookup of named instances that have much longer time span than components that look them up.
            Note: since registry does reading in a lock-free manner, it is possible to have an inconsistent read snapshot
             of ordered items which may capture items that have already/not yet been added to the registry
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_ReferenceEqualityComparer_1.htm" target="">ReferenceEqualityComparer<span id="ID0ECABLADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABLADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABLADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABLADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Checks for reference equality. Use ReferenceEqualityComparer(T).Instance
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Registry_1.htm" target="">Registry<span id="ID0ECABKADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABKADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABKADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABKADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Represents a thread-safe registry of T. This class is efficient for concurrent read access and is not designed for cases when frequent modifications happen.
            It is ideal for lookup of named instances (such as components) that have much longer time span than components that look them up.
            Registry performs lock-free lookup which speeds-up many concurrent operations that need to map names into objects.
            The enumeration over registry makes a snapshot of its data, hence a registry may be modified by other threads while being enumerated.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/protclass.gif" alt="Protected class" title="Protected class" /></td><td><a href="T_NFX_RegistryDictionary_1.htm" target="">RegistryDictionary<span id="ID0ECABJADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABJADAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABJADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABJADAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Internal dictionary of string-named objects
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Scope.htm" target="">Scope</a></td><td><div class="summary">
             Helper class to be used in the context of 'using' clause to
             facilitate cleanup on scope exit and performing of other functions
             such as status logging
             </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_SealedString_Scope.htm" target="">SealedString<span id="ID0EBABHADAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABHADAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>Scope</a></td><td><div class="summary">
            Represents a scope of a SealedString creation that tracks the existing strings.
            Use Seal(string) to get an existing string or create a new one.
            Do not persist the instance of Scope for a long time as it accumulates references (string keys) that pressure the GC.
            This class is used in batched that create many sealed strings. Once those strings rae created the scope can be released.
            </div></td></tr><tr data="class; public"><td><img src="./../icons/protclass.gif" alt="Protected class" title="Protected class" /></td><td><a href="T_NFX_StringConsts.htm" target="">StringConsts</a></td><td><div class="summary">
            A dictionary of framework text messages.
            Localization may be done in this class in future
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_StringValueConversion.htm" target="">StringValueConversion</a></td><td><div class="summary">
            Provides extension methods for converting string values to different scalar types
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_TaskUtils.htm" target="">TaskUtils</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_Trace.htm" target="">Trace</a></td><td><div class="summary">
            Facilitates debugging tasks enabled by TRACE conditional define
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_URIUtils.htm" target="">URIUtils</a></td><td></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_WrappedException.htm" target="">WrappedException</a></td><td><div class="summary">
            Represents exception that contains data about causing exception with all of it's chain
            </div></td></tr><tr data="class; public"><td><img src="./../icons/pubclass.gif" alt="Public class" title="Public class" /></td><td><a href="T_NFX_WrappedExceptionData.htm" target="">WrappedExceptionData</a></td><td><div class="summary">
            Marshalls exception details
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Structures</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Structure</th><th class="ps_descriptionColumn">Description</th></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_FID.htm" target="">FID</a></td><td><div class="summary">
             Represents an ultra-efficient 64 bit in-process-wide unique identifier "Fast Id".
             The ID is going to wrap-around after at least 2 weeks (19 days).
             The ID consists of 3 segments: [timestamp: 24bit][threadseed: 24bit][counter: 16 bit].
             This is needed because:
              a). FID stays unique after process restarts
              b). This design does not use interlock on global seed, but uses thread-static vars which is 10-20 times faster
            
             The timestamp is the number of 100ms intervals elapsed since Jan 1 2015 expressed as a 24 bit unsigned int, which gives 2^24 = 16,777,216 combinations
             which covers 19 days (around 2 weeks) at 100 msec resolution, consequently the ID will generate duplicates after this period.
             This struct is useful for creating unique IDs for protocol/traffic messages that live for a limited time (no more than 2 weeks).
             Caution: This ID does not identify the machine or process, only items within the process, however when a hosting process restarts(i.e. crash or reboot)
             the new IDs will not collide with IDs generated right before the crash for at least 14 days (14 day sliding window).
             In a parallel test on 6 Core i7 3.2 GHz this class generates 405 million IDs/sec, which is 57 times faster than Guid that only generates 7 million IDs/sec
             </div></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_Scope__scopeExit.htm" target="">Scope<span id="ID0EBABFACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABFACAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>_scopeExit</a></td><td></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_Scope__scopeExit_1.htm" target="">Scope<span id="ID0EEABEACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABEACAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>_scopeExit<span id="ID0ECABEACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABEACAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TCtx1<span id="ID0EAABEACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABEACAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_Scope__scopeExit_2.htm" target="">Scope<span id="ID0EEABDACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABDACAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>_scopeExit<span id="ID0ECABDACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABDACAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TCtx1, TCtx2<span id="ID0EAABDACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABDACAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_Scope__scopeExit_3.htm" target="">Scope<span id="ID0EEABCACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABCACAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>_scopeExit<span id="ID0ECABCACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABCACAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TCtx1, TCtx2, TCtx3<span id="ID0EAABCACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABCACAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_Scope__scopeExit_4.htm" target="">Scope<span id="ID0EEABBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EEABBACAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>_scopeExit<span id="ID0ECABBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABBACAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>TCtx1, TCtx2, TCtx3, TCtx4<span id="ID0EAABBACAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABBACAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td></td></tr><tr data="structure; public"><td><img src="./../icons/pubstructure.gif" alt="Public structure" title="Public structure" /></td><td><a href="T_NFX_SealedString.htm" target="">SealedString</a></td><td><div class="summary">
            Represents an immutable string data that is stored in an efficient way that relieves the GC pressure.
            The string can not be changed or deleted. Once created it stays as-is until the process is terminated.
            This structure is used to store much dictionary data (100s of millions of strings) in the process without causing GC overload.
            Note: The default .ctor DOES NOT check whether the same string is already present in memory. Use SealedString.Scope to
             store unique strings only (do not store the repetitions).
            This struct is THREAD SAFE and NOT SERIALIZABLE.
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Interfaces</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Interface</th><th class="ps_descriptionColumn">Description</th></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IEndableInstance.htm" target="">IEndableInstance</a></td><td><div class="summary">
            Describes an entity that can request some hosting container to end its lifetime by calling End() method
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IExternallyParameterized.htm" target="">IExternallyParameterized</a></td><td><div class="summary">
            Denotes an entity that has external parameters that can be get/set
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_INamed.htm" target="">INamed</a></td><td><div class="summary">
            Denotes an entity that has a Name property.
            This interface is primarily used with Registry[INamed] class that allows for
             string-based addressing (getting instances by object instance name).
            The names are ideal for many system functions, like naming components in configs and admin tools
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IOrdered.htm" target="">IOrdered</a></td><td><div class="summary">
            Denotes an entity that has a relative Order property within a collection of entities
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IOrderedRegistry_1.htm" target="">IOrderedRegistry<span id="ID0ECABDABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABDABAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABDABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABDABAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Provides read-only named ordered object lookup capabilities
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IParameter.htm" target="">IParameter</a></td><td><div class="summary">
            Represents abstract parameter
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IParameters.htm" target="">IParameters</a></td><td><div class="summary">
            Represents abstract parameters bag
            </div></td></tr><tr data="interface; public"><td><img src="./../icons/pubinterface.gif" alt="Public interface" title="Public interface" /></td><td><a href="T_NFX_IRegistry_1.htm" target="">IRegistry<span id="ID0ECABAABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0ECABAABAAAAA?vb=(Of |cpp=&lt;|cs=&lt;|fs=&lt;'|nu=(");
				</script>T<span id="ID0EAABAABAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EAABAABAAAAA?vb=)|cpp=&gt;|cs=&gt;|fs=&gt;|nu=)");
				</script></a></td><td><div class="summary">
            Provides read-only named object lookup capabilities
            </div></td></tr></table><div class="OH_CollapsibleAreaRegion"><div class="OH_regiontitle">Enumerations</div><div class="OH_CollapsibleArea_HrDiv"><hr class="OH_CollapsibleArea_Hr" /></div></div><div class="OH_clear"></div><table id="typeList" class="members"><tr><th class="ps_iconColumn">
					 
				</th><th class="ps_nameColumn">Enumeration</th><th class="ps_descriptionColumn">Description</th></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_ConvertErrorHandling.htm" target="">ConvertErrorHandling</a></td><td><div class="summary">
            Specifies how to handle errors during object value conversion
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_DebugAction.htm" target="">DebugAction</a></td><td><div class="summary">
            Specifies how to handle Assertion and other failures
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_DumpFormat.htm" target="">DumpFormat</a></td><td><div class="summary">
            Format of the String Dump
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_ExternalParameterSecurityCheck.htm" target="">ExternalParameterSecurityCheck</a></td><td><div class="summary">
            Specifies when security permissions should be checked while getting/setting extrenal parameters
            </div></td></tr><tr data="enumeration; public"><td><img src="./../icons/pubenumeration.gif" alt="Public enumeration" title="Public enumeration" /></td><td><a href="T_NFX_ObjectValueConversion_TriStateBool.htm" target="">ObjectValueConversion<span id="ID0EBABAAAAAAAA"> </span><script type="text/javascript">
					addToLanSpecTextIdSet("ID0EBABAAAAAAAA?vb=.|cpp=::|cs=.|fs=.|nu=.");
				</script>TriStateBool</a></td><td><div class="summary">
            A "hack" enum used to provide tri-state checkbox functionality in some systems, i.e. HTML checkmarks
            do not understand "nulls". This is a surrogate type not used in server-side programming
            </div></td></tr></table></div></div></div></div><div id="OH_footer" class="OH_footer"><p /><p><a href="http://www.itadapter.com" target="_blank"><img src="./../icons/online_icon.gif" class="OH_offlineIcon" alt="Online" title="Online" /> 
						Copyright © 2006-2017 ITAdapter Corp Inc. (http://www.itadapter.com)</a></p><div class="OH_feedbacklink"><a href="mailto:nfx@itadapter.com?subject=NFX+Class+Library+NFX+Namespace+100+EN-US&amp;body=Your%20feedback%20is%20used%20to%20improve%20the%20documentation%20and%20the%20product.%20Your%20e-mail%20address%20will%20not%20be%20used%20for%20any%20other%20purpose%20and%20is%20disposed%20of%20after%20the%20issue%20you%20report%20is%20resolved.%20While%20working%20to%20resolve%20the%20issue%20that%20you%20report%2c%20you%20may%20be%20contacted%20via%20e-mail%20to%20get%20further%20details%20or%20clarification%20on%20the%20feedback%20you%20sent.%20After%20the%20issue%20you%20report%20has%20been%20addressed%2c%20you%20may%20receive%20an%20e-mail%20to%20let%20you%20know%20that%20your%20feedback%20has%20been%20addressed.">Send Feedback</a> on this topic to Contact Us.</div></div></body></html>